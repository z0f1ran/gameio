    const socket = io();

    const WINDOW_WIDTH = 1520;
    const WINDOW_HEIGHT = 800; 

    const canvas = document.getElementById("canvas");
    canvas.width = WINDOW_WIDTH;
    canvas.height = WINDOW_HEIGHT;
    const context = canvas.getContext("2d");

    socket.emit("new player");

    // —ç—Ç–æ —Ñ–∏–∫—Å–∞–Ω—É—Ç—å –Ω–∞–¥–∞
    const obstacles = [
        { x: 100, y: 100, width: 100, height: 100 },
        { x: 400, y: 300, width: 150, height: 150 }
    ];

    function drawLeaderboard(ctx, players) {
        let playerList = Object.values(players);
        playerList = playerList.filter(player => player.is_alive);
        const sortedPlayers = playerList.sort((a, b) => b.kills - a.kills);
    
        const maxToShow = 5;
        const startX = WINDOW_WIDTH - 200; // –ü–æ–ª–æ–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ X
        const startY = 50; // –ü–æ–ª–æ–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ Y
    
        ctx.fillStyle = 'white';
        ctx.font = '18px Arial';
        ctx.fillText("Top Players (Kills):", startX, startY - 20);
    
        for (let i = 0; i < Math.min(maxToShow, sortedPlayers.length); i++) {
            const player = sortedPlayers[i];
            let playerText = `${i + 1}. ${player._name}: ${player.kills} kills`;
    
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —Ç–æ–ø-1 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–±–∏–π—Å—Ç–≤
            if (i === 0) {
                player.is_top = true;
                playerText = `üëë ${playerText}`; // –î–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª–∏–∫ –∫–æ—Ä–æ–Ω—ã
            }
            else{
                player.is_top = false;
            }
    
            ctx.fillText(playerText, startX, startY + i * 30);
        }
    }
    

    function drawHpBar(ctx, player) {
        const barWidth = 640; // –®–∏—Ä–∏–Ω–∞ –ø–æ–ª–æ—Å–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
        const barHeight = 20; // –í—ã—Å–æ—Ç–∞ –ø–æ–ª–æ—Å–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
        const barX = 50; // –ü–æ–∑–∏—Ü–∏—è –ø–æ X (–Ω–∞–¥ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—ë–º)
        const barY = WINDOW_HEIGHT - 80; // –ü–æ–∑–∏—Ü–∏—è –ø–æ Y (—á—É—Ç—å –≤—ã—à–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è)
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–¥–æ—Ä–æ–≤—å—è
        const healthPercent = player.hp / player.maxHp;

        // –†–∞–º–∫–∞ –ø–æ–ª–æ—Å–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è
        ctx.strokeStyle = 'white';
        ctx.strokeRect(barX, barY, barWidth, barHeight);

        // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —á–∞—Å—Ç—å (—Ç–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ)
        ctx.fillStyle = 'red';
        ctx.fillRect(barX, barY, barWidth * healthPercent, barHeight);

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∑–¥–æ—Ä–æ–≤—å–µ–º
        ctx.fillStyle = 'white';
        ctx.font = '16px Arial';
        ctx.fillText(`${player.hp} / ${player.maxHp}`, barX + barWidth / 2 - 30, barY + barHeight / 2 + 5);
    }

    function drawObstacles(ctx, obstacles) {
        ctx.fillStyle = 'gray';
        obstacles.forEach(obstacle => {
            ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
        });
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    const drawInventory = (context, player) => {
        const inventoryX = 50; // –ü–æ–∑–∏—Ü–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        const inventoryY = WINDOW_HEIGHT - 50; // –ü–æ–∑–∏—Ü–∏—è –≤–Ω–∏–∑—É canvas
        const slotWidth = 120; // –®–∏—Ä–∏–Ω–∞ —Å–ª–æ—Ç–∞
        const slotHeight = 30; // –í—ã—Å–æ—Ç–∞ —Å–ª–æ—Ç–∞
        const slotPadding = 10; // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å–ª–æ—Ç–∞–º–∏

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—Ç–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        player.inventory.forEach((item, index) => {
            const slotX = inventoryX + (slotWidth + slotPadding) * index;

            // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ª–æ—Ç–∞
            context.fillStyle = "gray";
            context.fillRect(slotX, inventoryY, slotWidth, slotHeight);

            // –ï—Å–ª–∏ –≤ —Å–ª–æ—Ç–µ –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç, –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
            if (item) {
                context.fillStyle = "white";
                context.font = "16px sans-serif";
                context.textAlign = "center";
                context.fillText(item.name, slotX + slotWidth / 2, inventoryY + slotHeight / 2 + 5);
            }
        });
    };

    // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
    socket.on("state", (players) => {
        context.beginPath();
        context.fillStyle = "black";
        context.fillRect(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);
        context.closePath();


        drawObstacles(context, obstacles);
        drawLeaderboard(context, players);
        for (const id in players) {
            const player = players[id];
            if (player.is_alive) {
                drawPlayer(context, player);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–º
                if (id === socket.id) {
                    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
                    drawInventory(context, player);

                    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–æ–ª–æ—Å–∫—É –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
                    drawHpBar(context, player);

                }
            }
        }
    });